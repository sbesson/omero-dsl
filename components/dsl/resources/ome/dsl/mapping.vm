## SETUP
#set($table = ${type.typeToColumn($type.id)} )
#set($cascade_settings = "evict,lock,merge,persist,replicate,refresh,save-update")
## No cascade on delete.
##
<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
    
<hibernate-mapping>
#if($type.superclass)<joined-subclass
#else<class
#end
    name="${type.id}" 
    table="${table}"
    abstract="$type.abstract"
    #if($type.superclass)extends="$type.superclass"#end
    >

	<meta attribute="extra-import">ome.model.IObject</meta>
## Can move Interfaces to a list in Type (user can add their own!)
#if($type.class.name.equals("ome.dsl.LinkType"))
	<meta attribute="implements">ome.model.ILink</meta>
#else
	<meta attribute="implements">ome.model.IObject</meta>
#end

#if($type.abstract)
	<meta attribute="scope-class" inherit="false">public abstract</meta>
#end

#if(!$type.immutable)
	<meta attribute="implements">ome.model.IMutable</meta>
#end
	<meta attribute="implement-equals" inherit="false">true</meta>

        <meta attribute="class-code">
#foreach($prop in $type.properties)
	${prop.extracode}
#end 
	${type.extracode}
        </meta>


<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 COMMON
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
#####################################################################INHERITANCE
#if(!$type.superclass) 
        <id name="id" type="java.lang.Long" column="id">
            <generator class="sequence">
                <param name="sequence">seq_$table</param>
            </generator>
        </id>

#if(!$type.immutable)
        <version name="version" type="java.lang.Integer" 
                column="version" unsaved-value="negative"/>
#end

#if(!$type.global)	
        <component name="details" class="ome.model.internal.Details">
            <many-to-one name="owner" class="ome.model.meta.Experimenter" 
                column="owner_id" update="false"
                not-null="true" cascade="$cascade_settings"/>
            <many-to-one name="group" class="ome.model.meta.ExperimenterGroup" 
                column="group_id" update="false"
                not-null="true" cascade="$cascade_settings"/>
            <many-to-one name="creationEvent" class="ome.model.meta.Event" 
                column="creation_id" update="false"
                not-null="true" cascade="$cascade_settings"/>		
#if(!$type.immutable)
            <many-to-one name="updateEvent" class="ome.model.meta.Event" 
                column="update_id" update="true"
                not-null="false" cascade="$cascade_settings"/>			
#end
#else
        <component name="details" class="ome.model.internal.Details"> ## FIXME
#end
            <component name="permissions" class="ome.model.internal.Permissions">
                <property name="bytes" type="binary" column="permissions"/> 
                <!-- TODO possibly just default CHMOD here -->
            </component>
	  
            <dynamic-component name="counts" insert="false" update="false">
## TODO: again don't support multiple Links from a single type.
#foreach($prop in $type.properties)
#set($klass = ${prop.class.name})
#if($klass.contains("Link"))
                <property name="${prop.type}" insert="false" update="false" 
                    lazy="false" type="java.lang.Integer">
                    <formula>
                    	(select count(link.id) from ${type.typeToColumn($prop.type)} link
                    	##where
                    	)
                    </formula>
                </property>
#end
#end 
            </dynamic-component>
	  
        </component>
#else ###############################################################INHERITANCE
#set($superId = ${type.typeToColumn($type.superclass)} )
	<key column="${superId}_id"/>
#end 
#####################################################################INHERITANCE
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 INTERFACE-BASED
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

#if($type.named)
	<property name="name" type="java.lang.String" 
		column="name" not-null="true" length="256"/>
#end

#if($type.described)
	<property name="description" type="java.lang.String" 
		column="description" length="256"/>
#end
	
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	 SPECIFIC
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

    <!-- Associations -->
    
#foreach($prop in $type.properties) ########################################EACH

##.......................................................................SETUP
#if($prop.class.name == "ome.dsl.LinkParent" || $prop.class.name == "ome.dsl.LinkChild") 
#set($propertyType = '<meta attribute="property-type">IObject</meta>')
#else
#set($propertyType = "")
#end
##.......................................................................SETUP

#if($prop.class.name == "ome.dsl.EntryField") #############################TYPE
## This is handled by ome/dsl/data.vm
###########################################################################TYPE
#elseif($prop.one2Many) 
	<!-- one-to-many association to $prop.name -->

## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LIST
#if($prop.ordered)
    <list
#else
    <set
#end 
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LIST
        name="${prop.name}"
        lazy="true"
        inverse="${prop.inverse}"
##TODO		mutable="${prop.mutable}"
        cascade="$cascade_settings">
        <key>
                <column name="${table}" not-null="${prop.required}"/>
        </key>
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LIST
#if($prop.ordered)
        <list-index column="index"/>
#end
        <one-to-many class="${prop.type}"/>
#if($prop.ordered) 
    </list>
#else
    </set>
#end
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LIST

#elseif($prop.foreignKey) #################################################TYPE

    <!-- many-to-one association to $prop.name -->
    <many-to-one
        name="${prop.name}"
        class="${prop.type}"
        column="${prop.name}"
        not-null="${prop.required}"
        unique="${prop.unique}"
        cascade="$cascade_settings"
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LIST        
## Allows for ordered collections in the bidirectional many-to-one case 
#if($prop.inverse) ## TODO move this logic to Property!!! 
        insert="false"
        update="false"        
#else
        update="${prop.mutable}"
#end 
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~LIST
     >
     $propertyType
     </many-to-one>

#else #####################################################################TYPE

    <property name="${prop.name}" type="${prop.type}" 
        not-null="${prop.required}" unique="${prop.unique}" 
        update="${prop.mutable}"
     />

#end
#end #######################################################################EACH

#if($type.superclass)</joined-subclass>
#else</class>
#end
</hibernate-mapping>
